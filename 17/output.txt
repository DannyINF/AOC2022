import time, math
from itertools import cycle
start_time = time.time()

with open("aoc17.txt", "r") as file:
    data = list(file.read().strip())

class Block:
    def __init__(self, width: int, ident: int, points):
        self.width = width
        self.ident = ident
        self.points = points
        self.pos = 2

    def reset(self):
        self.pos = 2

blocks = cycle([
    Block(4, 0, [(0, 0), (1, 0), (2, 0), (3, 0)]),
    Block(3, 1, [(1, 0), (0, 1), (1, 1), (2, 1), (1, 2)]),
    Block(3, 2, [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)]),
    Block(1, 3, [(0, 0), (0, 1), (0, 2), (0, 3)]),
    Block(2, 4, [(0, 0), (1, 0), (0, 1), (1, 1)])])

directions = cycle(data)

room = [{-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}]

def get_xy(x, y):
    global room
    return y in room[x]

def set_xy(x, y):
    global room
    room[x].add(y)

def calc(i, part1):
    global blocks, directions, first, between, room, r
    block = next(blocks)
    block.reset()
    y = max(max(s) for s in room) + 4
    # move horizontally and down alternately
    for d in cycle(["lr", "down"]):
        if d == "down":
            # if any point of the current block will collide with an already placed one, this block is finished
            if any(get_xy(point[0] + block.pos, point[1] + y - 1) for point in block.points):
                break
            else:
                y -= 1
        else:
            lr = next(directions)
            if lr == "<":
                # move left only if it will not collide with the wall and no point will collide an already placed one
                if block.pos >= 1 and not any(get_xy(point[0] + block.pos - 1, point[1] + y) for point in block.points):
                    block.pos -= 1
            else:
                # analoge to moving left
                if block.pos <= 6 - block.width and not any(get_xy(point[0] + block.pos + 1, point[1] + y) for point in block.points):
                    block.pos += 1
    # set the points
    for point in block.points:
        set_xy(block.pos + point[0], y + point[1])

    # part 2: when cycle starts, remember the way the blocks lie
    if (i - first) % between == 0 and part1:
        m = max(max(s) for s in room)
        r = [{t - m + 50 for t in s if m - t < 50} for s in room]

for i in range(2022):
    calc(i, True)

print(max(max(s) for s in room) + 1)